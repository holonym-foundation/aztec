
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  ContractStorageLayout,
  ContractNotes,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  loadContractArtifact,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
} from '@aztec/aztec.js';
import TokenBridgeContractArtifactJson from '../../../aztec-contracts/token_bridge/target/token_bridge-TokenBridge.json' assert { type: 'json' };
export const TokenBridgeContractArtifact = loadContractArtifact(TokenBridgeContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract TokenBridge;
 */
export class TokenBridgeContract extends ContractBase {
  
  private constructor(
    instance: ContractInstanceWithAddress,
    wallet: Wallet,
  ) {
    super(instance, TokenBridgeContractArtifact, wallet);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, TokenBridgeContract.artifact, wallet) as Promise<TokenBridgeContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, token: AztecAddressLike, portal_address: EthAddressLike) {
    return new DeployMethod<TokenBridgeContract>(Fr.ZERO, wallet, TokenBridgeContractArtifact, TokenBridgeContract.at, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeysHash(publicKeysHash: Fr, wallet: Wallet, token: AztecAddressLike, portal_address: EthAddressLike) {
    return new DeployMethod<TokenBridgeContract>(publicKeysHash, wallet, TokenBridgeContractArtifact, TokenBridgeContract.at, Array.from(arguments).slice(2));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof TokenBridgeContract['methods']>(
    opts: { publicKeysHash?: Fr; method?: M; wallet: Wallet },
    ...args: Parameters<TokenBridgeContract['methods'][M]>
  ) {
    return new DeployMethod<TokenBridgeContract>(
      opts.publicKeysHash ?? Fr.ZERO,
      opts.wallet,
      TokenBridgeContractArtifact,
      TokenBridgeContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return TokenBridgeContractArtifact;
  }
  

  public static get storage(): ContractStorageLayout<'token' | 'portal_address'> {
      return {
        token: {
      slot: new Fr(1n),
      typ: "PublicMutable<AztecAddress, Context>",
    },
portal_address: {
      slot: new Fr(2n),
      typ: "SharedImmutable<EthAddress, Context>",
    }
      } as ContractStorageLayout<'token' | 'portal_address'>;
    }
    

  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public override methods!: {
    
    /** compute_note_hash_and_optionally_a_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, compute_nullifier: boolean, serialized_note: array) */
    compute_note_hash_and_optionally_a_nullifier: ((contract_address: AztecAddressLike, nonce: FieldLike, storage_slot: FieldLike, note_type_id: FieldLike, compute_nullifier: boolean, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** exit_to_l1_public(recipient: struct, amount: field, caller_on_l1: struct, nonce: field) */
    exit_to_l1_public: ((recipient: EthAddressLike, amount: FieldLike, caller_on_l1: EthAddressLike, nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_portal_address_public() */
    get_portal_address_public: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** exit_to_l1_private(token: struct, recipient: struct, amount: field, caller_on_l1: struct, nonce: field) */
    exit_to_l1_private: ((token: AztecAddressLike, recipient: EthAddressLike, amount: FieldLike, caller_on_l1: EthAddressLike, nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** claim_private(secret_hash_for_redeeming_minted_notes: field, amount: field, secret_for_L1_to_L2_message_consumption: field) */
    claim_private: ((secret_hash_for_redeeming_minted_notes: FieldLike, amount: FieldLike, secret_for_L1_to_L2_message_consumption: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_token() */
    get_token: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_portal_address() */
    get_portal_address: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** constructor(token: struct, portal_address: struct) */
    constructor: ((token: AztecAddressLike, portal_address: EthAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** claim_public(to: struct, amount: field, secret: field, message_leaf_index: field) */
    claim_public: ((to: AztecAddressLike, amount: FieldLike, secret: FieldLike, message_leaf_index: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
